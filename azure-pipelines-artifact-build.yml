# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

variables:
  BuildConfiguration: "Release"

steps:
- task: AdvancedSecurity-Codeql-Init@1
  inputs:
    languages: "csharp, javascript"
  displayName: "Setup Advanced Security"
- task: DotNetCoreCLI@2
  displayName: "Restore .Net Nuget Packages"
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: 'd1465070-9153-45fd-8b5a-fd8805daa190'
- task: DotNetCoreCLI@2
  displayName: "Build .Net Projects"
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: "Run .Net Unit Tests"
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--configuration $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: "FA Integrations Admin SB - Publish"
  inputs:
    command: "publish"
    publishWebProjects: false
    arguments: '--configuration Release --output publish_output_integrations_admin_function_app_sb'
    projects: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Observability.ServiceBusHandlers/*.csproj'
    modifyOutputPath: false
    zipAfterPublish: false
- task: DotNetCoreCLI@2
  displayName: "FA Integrations Admin EH - Publish"
  inputs:
    command: "publish"
    publishWebProjects: false
    arguments: '--configuration Release --output publish_output_integrations_admin_function_app_eh'
    projects: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Admin.EventHubHandlers/*.csproj'
    modifyOutputPath: false
    zipAfterPublish: false
- task: CopyFiles@2
  displayName: "FA Integrations Admin SB - copy build"
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/publish_output_integrations_admin_function_app_eh'
    Contents: '**'
    TargetFolder: '$(System.DefaultWorkingDirectory)/publish_output_integrations_admin_function_app'
    CleanTargetFolder: true
    OverWrite: true
- task: CopyFiles@2
  displayName: "FA Integrations Admin EH - Copy build"
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/publish_output_integrations_admin_function_app_sb'
    Contents: '**'
    TargetFolder: '$(System.DefaultWorkingDirectory)/publish_output_integrations_admin_function_app'
    CleanTargetFolder: false
    OverWrite: true
- task: ArchiveFiles@2
  displayName: "FA Integrations Admin - Archive"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output_integrations_admin_function_app"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/$(IntegrationsAdmin_Backend).zip"
- task: PublishPipelineArtifact@1
  displayName: "FA Integrations Admin - Publish Artifact"
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)\$(IntegrationsAdmin_Backend).zip'
    artifact: '$(IntegrationsAdmin_Backend)'
    publishLocation: 'pipeline'
- task: DotNetCoreCLI@2
  displayName: "API Integrations Admin- Build"
  inputs:
    command: 'publish'
    publishWebProjects: false
    arguments: '--configuration Release --output publish_output_integrations_admin_api'
    projects: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Admin.Api/*.csproj'
    modifyOutputPath: false
    zipAfterPublish: false
- task: ArchiveFiles@2
  displayName: "API Integrations Admin - Archive"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output_integrations_admin_api"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/$(IntegrationsAdmin_Backend_API_Build).zip"
- task: PublishPipelineArtifact@1
  displayName: "API Integrations Admin- Publish"
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)\$(IntegrationsAdmin_Backend_API_Build).zip'
    artifact: '$(IntegrationsAdmin_Backend_API_Build)'
    publishLocation: 'pipeline'
- task: Npm@1
  displayName: 'NPM Install'
  inputs:
    command: 'install'
    workingDir: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Admin.FE/'
- task: Npm@1
  displayName: 'NPM Build-Integrations Admin - Front End'
  inputs:
    command: 'custom'
    workingDir: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Admin.FE/'
    customCommand: 'run build'
- task: Npm@1
  displayName: 'NPM Test-Integrations Admin - Front End'
  inputs:
    command: 'custom'
    workingDir: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Admin.FE/'
    customCommand: 'run test'
- task: ArchiveFiles@2
  displayName: "FE Integrations Admin- Archive"
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Express.DataIntegrations.Admin.FE/dist'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(System.DefaultWorkingDirectory)/$(IntegrationsAdmin_Frontend).zip'
    replaceExistingArchive: true
- task: PublishPipelineArtifact@1
  displayName: "FE Integrations Admin- Publish"
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)\$(IntegrationsAdmin_Frontend).zip'
    artifact: '$(IntegrationsAdmin_Frontend)'
    publishLocation: 'pipeline'
- task: AdvancedSecurity-Dependency-Scanning@1
  displayName: "Advanced Security: Run Dependency Scanner"
- task: AdvancedSecurity-Codeql-Autobuild@1
  displayName: "Advanced Security: Autobuild"
- task: AdvancedSecurity-Codeql-Analyze@1
  displayName: "Advanced Security: Run SAST"
- powershell: |
    echo "Removing current Mend CLI"
    Remove-Item -Path ".\mend.exe" -Force -ErrorAction SilentlyContinue
    echo "Downloading Mend CLI"
    Invoke-WebRequest -Uri "https://downloads.mend.io/cli/windows_amd64/mend.exe" -OutFile "mend.exe"
    echo "Run Mend dependencies scan"
    ./mend.exe dep -u -s "*//$(System.TeamProject)//$(MendProductName)_$(Build.Repository.Name)_$(Build.SourceBranchName)"
    echo "Start Mend (SAST) Scan"
    ./mend.exe code --name=$(MendProductName)_$(Build.SourceBranchName)_$(Build.BuildNumber) -s "*//$(System.TeamProject)//$(MendProductName)_$(Build.Repository.Name)_$(Build.SourceBranchName)"
  displayName: "Mend Scan"
  errorActionPreference: continue
  continueOnError: true
  env:
    MEND_EMAIL: $(mendemail)
    MEND_ORGANIZATION: $(mendorganization)
    MEND_URL: $(mendurl)
    MEND_USER_KEY: $(menduserkey)